<?php
/**
 * @file
 * Code for the Able Organizer feature.
 */

include_once 'ao.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function ao_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
  return NULL;
}

/**
 * Implements hook_form_alter().
 */
function ao_form_alter(&$form, &$form_state, $form_id) {

  $forms = array(
    'crm_core_profile_entry_form_ao_donation_form',
    'crm_core_profile_entry_form_ao_annual_appeal_form',
    'crm_core_profile_entry_form_ao_fundraiser_form',
    'crm_core_profile_entry_form_ao_cmcev_simple_single_form',
    'crm_core_profile_entry_form_ao_cmcev_simple_quantity_form',
    'crm_core_profile_entry_form_ao_cmcev_simple_many_form',
    'crm_core_profile_entry_form_ao_cmcev_simple_reg_form',
    'crm_core_profile_entry_form_short_petition_with_message',
    'crm_core_profile_entry_form_canvass_signatures',
    'crm_core_profile_entry_form_short_online_petition',
    'crm_core_profile_entry_form_short_petition_with_message',
    'crm_core_profile_entry_form_signature_drive',
    'crm_core_profile_entry_form_ao_volunteer_commitment_form',
  );

  if (in_array($form_id, $forms)) {
    $form['field_ao_email_address'][LANGUAGE_NONE][0]['email']['#description'] = FALSE;
    $form['field_ao_email_address'][LANGUAGE_NONE][0]['#description'] = FALSE;
    $form['field_ao_email_address'][LANGUAGE_NONE]['#description'] = FALSE;
  }
}

/**
 * Implements hook_uuid_node_features_export_render_alter().
 *
 * Adding path alias and menu link to export.
 */
function ao_uuid_node_features_export_render_alter(&$export, $node, $module) {

  $nids = entity_get_id_by_uuid('node', array($node->uuid));
  $path = 'node/' . $nids[$node->uuid];
  $alias = drupal_get_path_alias($path);
  if ($path !== $alias) {
    $export->url_alias = $alias;
  }

  // Export the menu, if it's attached to the node.
  if (module_exists('menu')) {
    $uuid = $node->uuid;
    $nids = entity_get_id_by_uuid('node', array($uuid));
    $node->nid = $nids[$uuid];
    menu_node_prepare($node);
    if (isset($node->menu)) {
      if (isset($node->menu['link_title']) && !empty($node->menu['link_title'])) {
        $export->new_menu = $node->menu;
      }
    }
    unset($node->nid);
    unset($node->menu);
  }
}

/**
 * Implements hook_node_insert().
 */
function ao_node_insert($node) {

  if (isset($node->url_alias)) {
    // Check to see if the alias already exists.
    $check = drupal_get_normal_path($node->url_alias);
    // If so, delete the alias so we can create it again.
    if ($check === $node->url_alias) {
      // Delete the alias.
      path_delete(array('alias' => $check));
    }
    // Save the alias.
    $path = array(
      'alias' => $node->url_alias,
      'source' => 'node/' . $node->nid,
    );
    // Save.
    path_save($path);
    unset($node->url_alias);
  }

  // When content is imported, let's make sure we save whatever menu stuff needs
  // saving there should be an item with an exported menu item.
  if (module_exists('menu') && isset($node->new_menu)) {
    // Add the menu item.
    $item = array(
      'link_path' => 'node/' . $node->nid,
      'link_title' => $node->new_menu['link_title'],
      'menu_name' => $node->new_menu['menu_name'],
      'hidden' => $node->new_menu['hidden'],
      'weight' => $node->new_menu['weight'],
    );
    menu_link_save($item);
    // But you can't do this every time... only when you are importing content.
    unset($node->new_menu);
  }
}
